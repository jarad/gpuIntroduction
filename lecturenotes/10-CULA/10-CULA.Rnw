% !TEX TS-program = knitr
\documentclass{article}

\hoffset = 0pt
\voffset = 0pt
\footskip = 75pt

\usepackage[landscape]{geometry}
\usepackage{amssymb,amsfonts}
\usepackage[all,arc]{xy}
\usepackage{enumerate}
\usepackage{mathrsfs}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{latexsym}
\usepackage{graphicx}
\usepackage{mathrsfs}
\usepackage[all,arc]{xy}
\usepackage{enumerate}
\usepackage{color}
\usepackage{graphicx}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{multirow}
\usepackage{subfig}
\usepackage{color}

\providecommand{\beq}{\begin{equation*}}
\providecommand{\eeq}{\end{equation*}}
\providecommand{\bs}{\backslash}
\providecommand{\e}{\varepsilon}
\providecommand{\E}{\ \exists \ }
\providecommand{\all}{\ \forall \ }
\providecommand{\Rt}{\Rightarrow}
\providecommand{\rt}{\rightarrow}
\providecommand{\vc}[1]{\boldsymbol{#1}}
\providecommand{\N}{\mathbb{N}}
\providecommand{\Q}{\mathbb{Q}}
\providecommand{\R}{\mathbb{R}}
\providecommand{\C}{\mathbb{C}}
\providecommand{\Z}{\mathbb{Z}}
\providecommand{\Qn}{\mathbb{Q}^n}
\providecommand{\Rn}{\mathbb{R}^n}
\providecommand{\Cn}{\mathbb{C}^n}
\providecommand{\Zn}{\mathbb{Z}^n}
\providecommand{\Qk}{\mathbb{Q}^k}
\providecommand{\Rk}{\mathbb{R}^k}
\providecommand{\Ck}{\mathbb{C}^k}
\providecommand{\Zk}{\mathbb{Z}^k}
\providecommand{\ov}[1]{\overline{#1}}
\providecommand{\lmu}[1]{\lim_{#1 \rightarrow \infty}}
\providecommand{\lmd}[1]{\lim_{#1 \rightarrow -\infty}}
\providecommand{\lm}[2]{\lim_{#1 \rightarrow #2}}
\providecommand{\nv}{{}^{-1}}
\providecommand{\aut}[1]{\text{Aut}{ \ #1}}
\providecommand{\inn}[1]{\text{Inn}{ \ #1}}
\providecommand{\cj}[1]{\overline{#1}}
\providecommand{\wh}[1]{\widehat{#1}}

\newtheorem{thm}{Theorem}[section]
\newtheorem{cor}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\newtheorem{lem}[thm]{Lemma}
\newtheorem{conj}[thm]{Conjecture}
\newtheorem{quest}[thm]{Question}

\theoremstyle{definition}
\newtheorem{defn}[thm]{Definition}
\newtheorem{defns}[thm]{Definitions}
\newtheorem{con}[thm]{Construction}
\newtheorem{exmp}[thm]{Example}
\newtheorem{exmps}[thm]{Examples}
\newtheorem{notn}[thm]{Notation}

\newtheorem{notns}[thm]{Notations}
\newtheorem{addm}[thm]{Addendum}
\newtheorem{exer}[thm]{Exercise}

\theoremstyle{remark}
\newtheorem{rem}[thm]{Remark}
\newtheorem{rems}[thm]{Remarks}
\newtheorem{warn}[thm]{Warning}
\newtheorem{sch}[thm]{Scholium}

\makeatletter
\let\c@equation\c@thm
\makeatother
\numberwithin{equation}{section}

\bibliographystyle{plain}

\providecommand{\pset}{1}   %PUT PROBLEM SET NUMBRER HERE
\renewcommand{\labelenumi}{\alph{enumi}.} %controls enumerating style
\renewcommand{\labelenumii}{\roman{enumii}.} 

\setcounter{section}{\pset}

\begin{document}

<<setup, include=FALSE, cache=FALSE>>=
# this is equivalent to \SweaveOpts{...}
opts_chunk$set(fig.path='figure/minimal-', fig.align='center', fig.show='hold')
options(replace.assign=TRUE,width=90)
@


\begin{flushleft}


\Huge
\begin{center}
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
{\bf THE CUBLAS LIBRARY: VERSION R15}
\end{center} $\quad$ \newline

\LARGE

\begin{center}
Will Landau, Prof. Jarad Niemi
\end{center}
\newpage

\Huge
\begin{center}
{\bf WHAT IS CULA}
\end{center} $\quad$ \newline \Large

CULA is another set of gpu-accelerated linear algebra libraries. Essentially, it's the CUDA equivalent of LAPACK. \newline

Its routines include:

\begin{itemize}
\item Utilities for initializing matrices, copying them, scaling them, etc. 
\item Matrix multiplication
\item Factorizations: LU, QR, RQ, QL, SVD, and Cholesky
\item Solving systems of linear equations (which gives you matrix inversion)
\item Solving least squares problems
\item Eigenproblem solvers
\end{itemize}

\newpage

\Huge
\begin{center}
{\bf CULA INTERFACES}
\end{center} $\quad$ \newline \LARGE

\begin{itemize}
\item {\bf Standard}
\begin{itemize}
\item Each CULA function micromanages GPU resources so the user doesn't have to. 
\item Matrix arguments of CULA functions are pointers to CPU memory.
\item Activate by including the header, ``cula\_lapack.h". 
\end{itemize}
\item {\bf Device}:
\begin{itemize}
\item The user micromanages GPU resources as with CUBLAS. 
\item Matrix arguments of CULA functions are pointers to GPU memory.
\item Activate by including the header, ``cula\_lapack\_device.h"
\end{itemize}
\end{itemize} $\quad$ \newline
There's also a ``convenience header" called ``cula.h", which includes both ``cula\_lapack.h and ``cula\_lapack\_device.h". \newline

\Huge
{\color{red} Note: although convenient, the standard interface is often slow because every single function writes back and forth between the CPU and the GPU.}
\newpage



\Huge
\begin{center}
{\bf COMPILING WITH CULA}
\end{center} $\quad$ \newline \Large

\begin{enumerate}[1. ]
\item Include the header file in your source: ``cula\_lapack.h" for the standard interface, ``cula\_lapack\_device.h" for the device interface, or ``cula.h" for both. \newline
\item Enter in the command line:
\begin{verbatim}
nvcc -I /usr/local/cula/include -L /usr/local/cula/lib64 -lcula_core -lcula_lapack 
         -lcublas -lcudart your_source.cu -o your_binary
\end{verbatim}
\end{enumerate} $\quad$ \newline

Note:

\begin{itemize}
\item {\tt  -I /usr/local/cula/include} tells the compiler, {\tt nvcc}, where to find the {\tt .h} files.
\item {\tt -L /usr/local/cula/lib64} tells {\tt nvcc} to use the 64-bit version of the CULA library.
\item {\tt -lcula\_core -lcula\_lapack -lcublas -lcudart} tells {\tt nvcc} to link the CULA library to your binary. 
\end{itemize} 

\newpage

\Huge
\begin{center}
{\bf EXAMPLE}
\end{center} $\quad$ \newline


\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{compilecula} \newpage


\Huge
\begin{center}
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
{\bf FUNCTION NAME CONVENTIONS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=.5\textwidth} \includegraphics[scale=0.25,angle=0]{convention} \newpage


\Huge
\begin{center}
{\bf CULAPACK PREFIX}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=.5\textwidth} \includegraphics[scale=0.25,angle=0]{convention} \newline \newline

\begin{tabular}{|c|c|c|}
\hline
\bf Interface & \bf Culapack Prefix & \bf Example function  \\ \hline
Standard & {\tt cula} & {\tt culaSgeqrf}  \\ \hline
Device & {\tt culaDevice} & {\tt culaDeviceSgeqrf}  \\ \hline
\end{tabular}

\newpage

\Huge
\begin{center}
{\bf DATA TYPE}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=.5\textwidth} \includegraphics[scale=0.25,angle=0]{convention} \newline

\setkeys{Gin}{width=1\textwidth} \includegraphics[scale=0.25,angle=0]{dtypes} \newpage

\Huge
\begin{center}
{\bf MATRIX TYPE}
\end{center}
\setkeys{Gin}{width=.5\textwidth} \includegraphics[scale=0.25,angle=0]{convention} \newline

\setkeys{Gin}{width=.75\textwidth} \includegraphics[scale=0.25,angle=0]{mtypes} \newpage


\Huge
\begin{center}
{\bf COMPUTATIONAL ROUTINE}
\end{center} 
\setkeys{Gin}{width=.5\textwidth} \includegraphics[scale=0.25,angle=0]{convention} \newline

\setkeys{Gin}{width=.75\textwidth} \includegraphics[scale=0.25,angle=0]{mtypes2} \newpage

\newpage


\Huge
\begin{center}
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
{\bf WHAT'S IN CULA?}
\end{center} \newpage

\newpage

\Huge
\begin{center}
{\bf FRAMEWORK FUNCTIONS}
\end{center} $\quad$ \newline \Large
\begin{tabular}{|c|p{15cm}|}
\hline
{\tt culaInitialize} & Initializes CULA. Must be called before using any other function. \\ \hline
{\tt culaShutdown} & Shuts down CULA. Must be called to deallocate CULA internal data. \\ \hline
{\tt culaGetLastStatus} & Returns the last status code returned from a CULA function. \\ \hline
{\tt culaGetStatusString} & Given a culaStatus number, returns a readable error string. \\ \hline
{\tt culaGetStatusAsString} & Returns the culaStatus name as a string. \\ \hline
{\tt culaGetErrorInfo} & Returns extended information about the last error or zero if it is unavailable \\ \hline
{\tt culaGetErrorInfoString} & Associates a culaStatus and culaInfo with a readable error string. \\ \hline
{\tt culaFreeBuffers} & Releases any memory buffers stored internally by CULA \\ \hline
{\tt culaGetVersion} & Reports the version number of CULA. \\ \hline
{\tt culaGetCudaMinimumVersion} & Reports the CUDA\_VERSION that the running version of CULA was compiled against, which indicates the minimum version of CUDA that is required to use this library. \\ \hline
{\tt culaGetCudaRuntimeVersion} & Reports the version of the CUDA runtime that the operating system linked against when the program was loaded. \\ \hline
{\tt culaGetCudaDriverVersion} & Reports the version of the CUDA driver installed on the system. \\ \hline
{\tt culaGetCublasMinimumVersion} & Reports the CUBLAS\_VERSION that the running version of CULA was compiled against, which indicates the mini- mum version of CUBLAS that is required to use this library. \\ \hline
\end{tabular} \newpage
\begin{tabular}{|c|p{15cm}|} \hline
{\tt culaGetCublasRuntimeVersion} & Reports the version of the CUBLAS runtime that operating system linked against when the program was loaded. \\ \hline
{\tt culaGetDeviceCount} & Reports the number of GPU devices Can be called before {\tt culaInitialize} \\ \hline
{\tt culaSelectDevice} & Selects a device with which CULA will operate. Must go after {\tt culaInitialize} \\ \hline
{\tt culaGetExecutingDevice} & Returns a pointer to the id of the GPU device executing CULA. \\ \hline
{\tt culaGetOptimalPitch} & Calculates a pitch that is optimal for CULA when using the device interface
parameters. \\ \hline
{\tt culaGetDeviceInfo} & Prints information to a buffer about a specified device. \\ \hline
{\tt culaDeviceMalloc} & Allocates memory on the device. \\ \hline
{\tt culaDeviceFree} & Frees memory that has been allocated with {\tt culaDeviceMalloc}. \\ \hline
\end{tabular}



\newpage
\Huge
\begin{center}
{\bf AUXILIARY FUNCTIONS}
\end{center} $\quad$ \newline 

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{auxiliary} \newpage
\Large

\begin{tabular}{|p{10cm}|p{10cm}|}
\hline
Conjugate (general matrix) & CgeConjugate, ZgeConjugate  \\ \hline
Conjugates either the upper or lower triangle of a matrix, with the option to include the diagonal or not & CtrConjugate, ZtrConjugate \\ \hline
Check a matrix for invalid values & SgeNancheck, DgeNancheck, CgeNancheck, ZgeNancheck \\ \hline
out-of-place matrix transpose: $A^T \mapsto B$ & SgeTranspose, DgeTranspose, CgeTranspose, ZgeTranspose \\ \hline
in-place matrix transpose: $A^T \mapsto A$ & SgeTransposeInplace, DgeTransposeInplace, CgeTransposeInplace, ZgeTransposeInplace \\ \hline
out-of-place matrix transpose + conjugate all elements & SgeTransposeConjugate, DgeTransposeConjugate, CgeTransposeConjugate, ZgeTransposeConjugate \\ \hline
in-place matrix transpose + conjugate all elements & SgeTransposeConjugateInplace, DgeTransposeConjugateInplace, CgeTransposeConjugateInplace, ZgeTransposeConjugateInplace \\ \hline
\end{tabular}




\newpage

\Huge
\begin{center}
{\bf MATRIX MULTIPLICATIONS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{multiply} \newpage

\Huge
\begin{center}
{\bf FACTORIZATIONS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{factor} \newpage

\Huge
\begin{center}
{\bf ORTHOGONAL FACTORIZATIONS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{orthogonalfactorizations} \newpage


\Huge
\begin{center}
{\bf SINGULAR VALUE DECOMPOSITIONS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{svd} \newpage

\Huge
\begin{center}
{\bf LEAST SQUARES}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{leastsquaresproblems} \newpage


\Huge
\begin{center}
{\bf SYMMETRIC EIGENPROBLEMS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{symmetriceigenproblemsolver} \newpage


\Huge
\begin{center}
{\bf NON-SYMMETRIC EIGENPROBLEMS}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{nonsymmetriceigenproblems} \newpage








\Huge
\begin{center}
{\bf EXAMPLE: deviceInterface}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=.9\textwidth} \includegraphics[scale=0.25,angle=0]{di1} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{di2} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{di3} \newpage
\setkeys{Gin}{width=.7\textwidth} \includegraphics[scale=0.25,angle=0]{di4} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{di5}  \newpage

Compile: {\tt make build64} \newline

Execute: {\tt ./deviceInterface}. 














\newpage

\Huge
\begin{center}
{\bf EXAMPLE: systemSolve}
\end{center} $\quad$ \newline

\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss1} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss2} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss3} \newpage
\setkeys{Gin}{width=.7\textwidth} \includegraphics[scale=0.25,angle=0]{sss4} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss5} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss6} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{sss7} \newpage



Compile and run as follows: \newline


\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{ss1} \newline
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{ss2} \newline
\setkeys{Gin}{width=.7\textwidth} \includegraphics[scale=0.25,angle=0]{ss3} 











\newpage
\Huge
\begin{center}
{\bf GPU SERIES MATERIALS}
\end{center} $\quad$ \newline
\huge
These slides, a tentative syllabus for the whole series, and code are available at: \newline

\begin{center}
 https://github.com/wlandau/gpu. 
\end{center} $\quad$ \newline


After logging into you home directory on impact1, type: \newline

\begin{verbatim}
        git clone https://github.com/wlandau/gpu
\end{verbatim} $\quad$ \newline

into the command line to download all the materials.

\newpage

\Huge
\begin{center}
{\bf REFERENCES}
\end{center} $\quad$ \newline \large

``CULA Programmer's Guide". CULA Tools. http://www.hpc-sol.co.jp/products/cula/doc/CULA\_dense\_R15/CULAProgrammersGuide\_R15.pdf \newline

``CULA Reference Manual". CULA Tools. http://www.hpc-sol.co.jp/products/cula/doc/CULA\_dense\_R15/CULAReferenceManual\_R15.pdf



\end{flushleft}
\end{document}