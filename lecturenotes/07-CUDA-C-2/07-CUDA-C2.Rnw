\documentclass{article}

\hoffset = 0pt
\voffset = 0pt
\footskip = 75pt

\usepackage[landscape]{geometry}
\usepackage{amssymb,amsfonts}
\usepackage[all,arc]{xy}
\usepackage{enumerate}
\usepackage{mathrsfs}
\usepackage{amsmath}
\usepackage{amsthm}
\usepackage{amssymb}
\usepackage{amsfonts}
\usepackage{latexsym}
\usepackage{graphicx}
\usepackage{mathrsfs}
\usepackage[all,arc]{xy}
\usepackage{enumerate}
\usepackage{color}
\usepackage{graphicx}
\usepackage{float}
\usepackage{wrapfig}
\usepackage{multirow}
\usepackage{subfig}
\usepackage{color}
% JBN: Including these two packages would not compile for me. Can you check to see if this file will compile for you as is? If it does, please leave these lines commented out. 
%\usepackage{Sweave}
%\usepackage{SASnRdisplay}


\usepackage{listings}
\usepackage{color}
 
\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}
 
\lstset{ %
  language=C,                % the language of the code
  basicstyle=\Large,           % the size of the fonts that are used for the code
  numbers=left,                   % where to put the line-numbers
  numberstyle=\tiny\color{white},  % the style that is used for the line-numbers
%  stepnumber=2,                   % the step between two line-numbers. If it's 1, each line 
                                  % will be numbered
  numbersep=5pt,                  % how far the line-numbers are from the code
  backgroundcolor=\color{white},      % choose the background color. You must add \usepackage{color}
  showspaces=false,               % show spaces adding particular underscores
  showstringspaces=false,         % underline spaces within strings
  showtabs=false,                 % show tabs within strings adding particular underscores
  frame=single,                   % adds a frame around the code
  rulecolor=\color{black},        % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. commens (green here))
  tabsize=2,                      % sets default tabsize to 2 spaces
  captionpos=n,                   % sets the caption-position 
  breaklines=true,                % sets automatic line breaking
  breakatwhitespace=false,        % sets if automatic breaks should only happen at whitespace
  title=\lstname,                   % show the filename of files included with \lstinputlisting;
                                  % also try caption instead of title
  keywordstyle=\color{blue},          % keyword style
  commentstyle=\color{dkgreen},       % comment style
  stringstyle=\color{mauve},         % string literal style
  escapeinside={\%*}{*)},            % if you want to add LaTeX within your code
  morekeywords={*,...}               % if you want to add more keywords to the set
}

\captionsetup{labelformat=empty,labelsep=none}

\providecommand{\beq}{\begin{equation*}}
\providecommand{\eeq}{\end{equation*}}
\providecommand{\bs}{\backslash}
\providecommand{\e}{\varepsilon}
\providecommand{\E}{\ \exists \ }
\providecommand{\all}{\ \forall \ }
\providecommand{\Rt}{\Rightarrow}
\providecommand{\rt}{\rightarrow}
\providecommand{\vc}[1]{\boldsymbol{#1}}
\providecommand{\N}{\mathbb{N}}
\providecommand{\Q}{\mathbb{Q}}
\providecommand{\R}{\mathbb{R}}
\providecommand{\C}{\mathbb{C}}
\providecommand{\Z}{\mathbb{Z}}
\providecommand{\Qn}{\mathbb{Q}^n}
\providecommand{\Rn}{\mathbb{R}^n}
\providecommand{\Cn}{\mathbb{C}^n}
\providecommand{\Zn}{\mathbb{Z}^n}
\providecommand{\Qk}{\mathbb{Q}^k}
\providecommand{\Rk}{\mathbb{R}^k}
\providecommand{\Ck}{\mathbb{C}^k}
\providecommand{\Zk}{\mathbb{Z}^k}
\providecommand{\ov}[1]{\overline{#1}}
\providecommand{\lmu}[1]{\lim_{#1 \rightarrow \infty}}
\providecommand{\lmd}[1]{\lim_{#1 \rightarrow -\infty}}
\providecommand{\lm}[2]{\lim_{#1 \rightarrow #2}}
\providecommand{\nv}{{}^{-1}}
\providecommand{\aut}[1]{\text{Aut}{ \ #1}}
\providecommand{\inn}[1]{\text{Inn}{ \ #1}}
\providecommand{\cj}[1]{\overline{#1}}
\providecommand{\wh}[1]{\widehat{#1}}

\newtheorem{thm}{Theorem}[section]
\newtheorem{cor}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\newtheorem{lem}[thm]{Lemma}
\newtheorem{conj}[thm]{Conjecture}
\newtheorem{quest}[thm]{Question}

\theoremstyle{definition}
\newtheorem{defn}[thm]{Definition}
\newtheorem{defns}[thm]{Definitions}
\newtheorem{con}[thm]{Construction}
\newtheorem{exmp}[thm]{Example}
\newtheorem{exmps}[thm]{Examples}
\newtheorem{notn}[thm]{Notation}

\newtheorem{notns}[thm]{Notations}
\newtheorem{addm}[thm]{Addendum}
\newtheorem{exer}[thm]{Exercise}

\theoremstyle{remark}
\newtheorem{rem}[thm]{Remark}
\newtheorem{rems}[thm]{Remarks}
\newtheorem{warn}[thm]{Warning}
\newtheorem{sch}[thm]{Scholium}

\makeatletter
\let\c@equation\c@thm
\makeatother
\numberwithin{equation}{section}

\bibliographystyle{plain}

\providecommand{\pset}{1}   %PUT PROBLEM SET NUMBRER HERE
\renewcommand{\labelenumi}{\alph{enumi}.} %controls enumerating style
\renewcommand{\labelenumii}{\roman{enumii}.} 
  
\setcounter{section}{\pset}

\begin{document}
\begin{flushleft}

\Huge
\begin{center}
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
$\quad$ \newline
{\bf CUDA C: PERFORMANCE MEASUREMENT AND TYPES OF MEMORY }
\end{center} $\quad$ \newline

\LARGE

\begin{center}
Will Landau, Prof. Jarad Niemi
\end{center}

\newpage

\Huge
\begin{center}
{\bf OUTLINE} 
\end{center} $\quad$ \newline 
\begin{itemize}
\item Measuring GPU performance
\item Global vs. local vs. shared memory
\item Implementing the dot product
\end{itemize} $\quad$ \newline

Featured examples: \newline
\begin{itemize}
\item {\tt time.cu}
\item {\tt dot\_product.cu}
\end{itemize}
% JBN: Last time we discussed providing pseudo-C-code. Perhaps it would make sense to included pseudo-C-code for the dot-product since you are going to be using it in this lecture. 



\Huge
\begin{center}
{\bf EVENTS: MEASURING PERFORMANCE ON THE GPU}
\end{center} $\quad$ \newline

{\bf Event}: a time stamp for the GPU. \newline

Use events to measure the amount of time the GPU spends on a task. \newline

\newpage

\Huge
\begin{center}
{\bf TEMPLATE: {\tt time.cu}}
\end{center} 

\Large

\begin{lstlisting}[language = C]
#include <stdlib.h>
#include <stdio.h>
#include <cuda.h>
#include <cuda_runtime.h>

int main(){
  float   elapsedTime;
  cudaEvent_t start, stop;
  cudaEventCreate(&start);
  cudaEventCreate(&stop);
  cudaEventRecord( start, 0 );

  // SOME GPU KERNEL YOU WANT TIMED HERE

  cudaEventRecord( stop, 0 );
  cudaEventSynchronize( stop );
  cudaEventElapsedTime( &elapsedTime, start, stop );
  cudaEventDestroy( start );
  cudaEventDestroy( stop );
  printf("GPU Time elapsed: %f\n", elapsedTime);
}
\end{lstlisting}  \newpage

\Huge

The variable, {\tt elapsedTime}, is the GPU time spent on the task. You can now print it any way you like. \newline
\color{red}

Note: only GPU elapsed time is measured, not CPU time. \newline

GPU time and CPU time must be measured separately.
\color{black}

\newpage

\Huge
\begin{center}
{\bf ASIDE: MEASURING CPU TIME}
\end{center} $\quad$ \newline \huge


\begin{lstlisting}[language = C]
#include <stdio.h>
#include <time.h>

int main(){

  clock_t start = clock();

  // SOME CPU CODE YOU WANT TIMED HERE

  float elapsedTime = ((double)clock() - start) / 
                            CLOCKS_PER_SEC;

  printf("CPU Time elapsed: %f\n", elapsedTime);
}
\end{lstlisting} 




\newpage
\Huge
\begin{center}
{\bf TYPES OF MEMORY}
\end{center} 


\setkeys{Gin}{width=.95\textwidth} \includegraphics[scale=0.25,angle=0]{mem} 


\newpage
\huge
\begin{center}
{\bf THOUGHT EXPERIMENT: GLOBAL VS. SHARED VS. LOCAL MEMORY}
\end{center}  $\quad$ \newline

 \LARGE
Let's say we have a kernel: \newline

\begin{verbatim}
    __global__ void kernel(int *a){
      *a = blockIdx.x * blockDim.x + threadIdx.x;
      int b  =  blockIdx.x * blockDim.x + threadIdx.x;
      __shared__ int c = blockIdx.x * blockDim.x + threadIdx.x;
    }
\end{verbatim} $\quad$ \newline

What are *a, b, and c after a call to {\tt kernel<<<3, 2>>>(a)}?

\newpage

\begin{description}
\item[{\tt *a}: ] There is one copy of {\tt*a} in GLOBAL MEMORY common to all threads and blocks. Hence, the value of {\tt*a} depends on which thread finishes last. \newline
\item[{\tt b}: ] There are 3$\cdot$2 = 6 copies of {\tt b} in LOCAL MEMORY, one for each of the six threads. The values of {\tt b} will be: \newline

\begin{tabular}{|c|c|c|c|c|c|c|}
\hline
(Block ID, Thread ID) &  (0, 0) & (0, 1) & (1, 0) & (1, 1) & (2, 0) & (2, 1) \\ \hline
Value of {\tt b} & 0 & 1 & 2 & 3 & 4 & 5  \\ \hline
\end{tabular} $\quad$ \newline

\item[{\tt c}: ] There are three copies of c in SHARED MEMORY, one for each block. The values of {\tt c} might be: \newline

\begin{tabular}{|c|c|c|c|c|c|c|}
\hline
(Block ID, Thread ID) &  (0, 0) & (0, 1) & (1, 0) & (1, 1) & (2, 0) & (2, 1) \\ \hline
Value of {\tt b} & 0 & 0 & 3 & 3 & 4 & 4  \\ \hline
\end{tabular} $\quad$ \newline

depending on which thread finishes last within each block.  
\end{description}


\newpage

\huge
\begin{center}
{\bf NOW, WE'RE READY FOR THE DOT PRODUCT}
\end{center}
\begin{align*}
(a_0, \ a_1, \ldots ,\  a_{15}) \bullet (b_0, \ b_1, \ldots , \ b_{15}) = a_0 b_0 + a_1 b_1 + \cdots + a_{15} b_{15}
\end{align*} $\quad$ \newline
The basic workflow is: \newline

\begin{itemize}
\item Pass vectors {\tt a} and {\tt b} to the GPU. \newline
\item Give each block a sub vector of {\tt a} and the analogous subvector of {\tt b}, For example: 

\begin{align*}
\intertext{Block 0 works on:}
&(a_0, \ a_1,\  \ldots,\  a_7) \\
&(b_0, \ b_1,\  \ldots,\ b_7)
\intertext{Block 1 works on:}
&(a_8, \ a_9,\  \ldots,\  a_{15}) \\
&(b_8, \ b_9,\  \ldots,\ b_{15})
\end{align*}$\quad$ \newline

\item Within each block, compute a vector of pairwise products:

\begin{align*}
\intertext{Block 0:}
\text{\tt cache} &= (a_0 \cdot b_0, \ a_1 \cdot b_1, \ \ldots, \  a_7 \cdot b_7)
\intertext{Block 1:}
\text{\tt cache} &= (a_8 \cdot b_8, \ a_9 \cdot b_9, \ \ldots, \  a_{15} \cdot b_{15})
\end{align*}

where {\tt cache} is an array in shared memory. \newline
\item Within each block, compute the pairwise sum of {\tt cache} and write it to {\tt cache[0]}. In our example: 
\begin{align*}
\intertext{Block 0:}
\text{\tt cache[0]} &= a_0 \cdot b_0 + a_1 \cdot b_1 + \cdots +  a_7 \cdot b_7
\intertext{Block 1:}
\text{\tt cache[0]} &= a_8 \cdot b_8 + a_9 \cdot b_9 + \cdots +  a_{15} \cdot b_{15}
\end{align*} $\quad$ \newline
\item Fill a new vector in global memory, {\tt partial\_c}, with these partial dot products: 
\begin{align*}
\text{ \tt partial\_c} = (\text{\tt block 0 cache[0]}, \ \text{\tt block 1 cache[0]})
\end{align*} $\quad$ \newline
\item Return to the CPU and compute the linear sum of \text{ \tt partial\_c} and write it to {\tt partial\_sum[0]}. Then:

\begin{align*}
\text{\tt partial\_sum[0] }= a_0 \cdot b_0 + a_1 \cdot b_1 + \cdots +    a_{15} \cdot b_{15}
\end{align*}

\end{itemize}

\newpage

First part of the code: \newline


\lstinputlisting[language = C]{dot_product1.cu}

% JBN: Why are these graphics files? Wouldn't it be better to have them as plain text? 
% JBN: Why do we have the imin function?
% JBN: Make sure to point out here that a and b are passed from the CPU. Each block will take a sub-vector of a and the associated subvector of b, calculate the dot-product of these sub-vectors, and return the scalar as one element of the vector c. 
% JBN: Pedagogically, it is a big jump from do the dot product to this code. Perhaps it would be good to build the code up rather than starting with the entire code and deconstructing. 
% JBN: I think you need another slide here describing the procedure you plan on implementing in pseudo-code. 
\newpage

What the code would do in a call to {\tt dot<<<2, 4>>>(a, b, c)} with $N$ = 16: \newline \newline

% JBN: I don't see the dot<<2,4>>(a,b,c) line on the previous slide.
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w0} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w1} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w2} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w3} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w4} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w5} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w6} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w7} \newpage
\setkeys{Gin}{width=1.15\textwidth} \includegraphics[scale=0.25,angle=0]{w8} \newpage


We want to make sure that each block's copy of {\tt cache} is filled up before we continue further. \newline
% JBN: "filled up for each block" -> "filled up within each block"

Hence, the next line of code is: \newline \newline

\lstinputlisting[language = C]{dot_product2.cu}

\newpage

\huge
\begin{center}
{\bf NEXT, WE EXECUTE A PAIRWISE SUM ON {\tt cache} FOR EACH BLOCK}
\end{center} $\quad$ \newline

\lstinputlisting[language = C]{dot_product3.cu} \newpage



\Huge
\begin{center}
{\bf WHAT'S GOING ON IN OUR CALL TO {\tt dot<<<2, 4>>>(a, b, c)}}
\end{center} $\quad$ \newline


\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s1} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s2} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s3} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s4} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s5} \newpage
\setkeys{Gin}{width=1.1\textwidth} \includegraphics[scale=0.25,angle=0]{s6} $\quad$ \newline

Similarly, {\tt cache[0]} for block 1 is 183. \newpage
\huge
Next: \newline

\lstinputlisting[language = C]{dot_product4.cu} $\quad$ \newline

So now, {\tt partial\_c[0]} = 123 and {\tt partial\_c[1]} is 183. \newpage \LARGE

We return from the kernel, {\tt dot()}, and compute the linear sum of the elements of {\tt partial\_c}: \newline

\lstinputlisting[language = C]{psum.cu} $\quad$ \newline

Now, {\tt partial\_c[0]} is the final answer.

\newpage

\Huge
\begin{center}
{\bf COMPLETE CODE}
\end{center}

\lstset{basicstyle = \Large}
\lstinputlisting[language = C]{dot_product.cu}

\newpage

\Huge
\begin{center}
{\bf OUTPUT}
\end{center} $\quad$ \newline


\begin{lstlisting}[language = bash]
[landau@impact1 dot_product]$ nvcc dot_product.cu -o dot_product
[landau@impact1 dot_product]$ ./dot_product
Does GPU value 2.57236e+13 = 2.57236e+13?
[landau@impact1 dot_product]$ 
\end{lstlisting}


\newpage
\Huge
\begin{center}
{\bf OUTLINE} 
\end{center} $\quad$ \newline \Large
\begin{itemize}
\item Respecting the SIMD paradigm
\item Shared memory
\item Implementing the dot product
\end{itemize} $\quad$ \newline

Featured examples: \newline
\begin{itemize}
\item {\tt dot\_product.cu}
\end{itemize}

\newpage


\Huge
\begin{center}
{\bf LECTURE SERIES MATERIALS}
\end{center} $\quad$ \newline
\huge
These lecture slides, a tentative syllabus for the whole lecture series, and code are available at: \newline

\begin{center}
 https://github.com/wlandau/gpu. 
\end{center} $\quad$ \newline


After logging into you home directory on impact1, type: \newline

\begin{verbatim}
        git clone https://github.com/wlandau/gpu
\end{verbatim} $\quad$ \newline

into the command line to download all the course materials.


\newpage
\Huge
\begin{center}
{\bf REFERENCES}
\end{center} $\quad$ \newline

David B. Kirk and Wen-mei W. Hwu. ``Programming Massively Parallel Processors: a Hands-on Approach." Morgan Kaufman, 2010. \newline

J. Sanders and E. Kandrot. {\it CUDA by Example}. Addison-Wesley, 2010. \newline

Michael Romero and Rodrigo Urra. "CUDA Programming."  Rochester Institute of Technology. http://cuda.ce.rit.edu/cuda\_overview/cuda\_overview.html

\end{flushleft}
\end{document}

